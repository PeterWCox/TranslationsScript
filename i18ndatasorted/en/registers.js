// Copyright (c) Leo RegTech Limited. All rights reserved.

export default {
  allowMultipleEdits: "Allow Multiple Edits",
  allowMultipleEntry: "Allow Multiple Entry",
  button: "Button",
  buttonAction: "Action",
  buttonLabel: "Label",
  closeConfirm: "If you continue, then all unsaved changes will be lost",
  columnName: "Column Name",
  columnPermissions: "Column Permissions",
  columnRequired: "Column Name is required",
  columnType: "Column Type",
  columnUnique: "Column Name must be unique",
  columns: "Columns",
  completionValue: "Completion Value",
  currency: "Currency",
  data: {
    attachment: {
      addAttachment: "Upload an attachment",
      deleteConfirm:
        "Are you sure you wish to remove the file {0} from this entry?",
    },
    attachments: "Attachments",
    entry: "Entry",
    history: "History",
    newValue: "New Value",
    oldValue: "Old Value",
  },
  date: "Date",
  dateTime: "Date Time",
  decimalPlaces: "Decimal Places",
  defaultColumn: {
    assignedTo: "Assigned To",
    createdBy: "Created By",
    createdOn: "Created On",
    name: "Default Column Type",
    updatedBy: "Updated By",
    updatedOn: "Updated On",
  },
  defaultValue: "Default Value",
  deleteColumn: "Delete Column",
  deleteColumnConfirm:
    "Are you sure you want to delete this column? This action cannot be undone.",
  deleteRegister: "Delete Register",
  details: "Details",
  displayOrder: "Display Order",
  dropdown: "Dropdown",
  editColumn: "Edit Column",
  editRule: "Edit Rule",
  emailAddress: "Email Address",
  exportData: "Export Data",
  flag: {
    attachment: "There is an attachment; open for details",
    attachments: "There are {0} attachments; open for details",
    complete: "The record was completed on {0}",
    dueNow: "This record is due to be completed by {0}",
    history:
      "Change have been made to the entry; see the History tab within the entry",
    locked: "This record was locked on {0}",
    overDue: "This record was due to be completed by {0}",
  },
  fromRegister: "From Register",
  fromTemplate: "From Template",
  groupingType: "Default grouping",
  header: "Column Header",
  headerLong: "Header text for column",
  import: {
    append: "Append the imported data as new entries in the register",
    errors:
      "The following import data is in error. Please correct and then try again.",
    replace:
      "Replace all incomplete entries in the register with the imported data",
    replaceAll: "Replace all entries in the register with the imported data",
    suppressEmail:
      "Suppress any emails that would be sent after creating the new entries",
    update:
      "Update the current entries where the title and assigned user match, otherwise new entries are created",
    warnings:
      "The following warnings occured in the import data. If these are okay, then you can continue.",
  },
  importData: "Import Data",
  isColour: "Sets The Row Colour",
  isDueDate: "Is Due Date",
  isRequired: "Required",
  isTitle: "Title Value for Entries",
  label: "Dialog Label",
  labelLong: "Label text for dialog",
  languageCode: "Language",
  lockValue: "Lock Value",
  menu: {
    complete: "Complete Entry",
    copyRegister: "Copy Register",
    copyTemplate: "Copy Register Template",
    createRegister: "Create Register",
    createTemplate: "Create Register Template",
    lock: "Lock Entry",
    read: "Mark as Read",
    settings: "Edit Settings",
    uncomplete: "Uncomplete Entry",
    unlock: "Unlock Entry",
    unread: "Mark as Unread",
  },
  minNumberOfMonthsEntriesVisibleValidationMessage:
    "Select a number greater or equal to 0, or leave the field blank",
  multiSelect: "Multiple Selections",
  multipleActionConfirm: "Please confirm that you wish to make this change.",
  multipleActionTitle: "{0} - {1} items",
  nameRequired: "Register Name is required",
  nameRequiredTemplate: "Register Template Name is required",
  nameUnique: "Register Name must be unique",
  nameUniqueTemplate: "Register Template Name must be unique",
  newColumn: "New Column",
  newEntry: "New Entry",
  newRegister: "New Register",
  newRegisterTemplate: "New Template",
  newRule: "New Rule",
  notifications: "Notifications",
  number: "Number",
  numberOfMonthsEntriesToggleTooltipShow: "Show hidden completed entries",
  numberOfMonthsEntriesVisible:
    "Hide completed entries older than number of months (leave blank to hide nothing)",
  option: {
    colour: "Colour",
    type: "Type",
    value: "Value",
    visible: "Visible",
  },
  optionUnique: "Option values must be unique",
  options: "Options",
  permissions: {
    create: "Create New",
    deleteAny: "Delete Any",
    deleteAssigned: "Delete Assigned",
    importExportData: "Import and Export Data",
    lockAny: "Lock Any",
    lockAssigned: "Lock Assigned",
    modify: "Modify",
    modifyAny: "Modify Any",
    modifyAssigned: "Modify Assigned",
    read: "Read",
    readAny: "Read Any",
    readAssigned: "Read Assigned",
  },
  recipientName: "Recipient Name",
  registerName: "Register Name",
  registerPermissions: "Register Permissions",
  registerTemplateName: "Register Template Name",
  registers: "Registers",
  reorderColumns: "Reorder Columns",
  requiresValue: "Only show when set",
  rule: {
    action: "Action",
    actions: {
      api: "Call {0} API",
      assignTask: "Assign task to {0}",
      clearValue: "Clear the value of {0}",
      completeEntry: "Set completed",
      dayAfter: "the day after {0}",
      dayBefore: "the day before {0}",
      daysAfter: "{1} days after {0}",
      daysBefore: "{1} days before {0}",
      disableButton: "Disable button for {0}",
      emailGroup: "Group email to {0}",
      emailUser: "Email to {0}",
      enableButton: "Enable button for {0}",
      label: {
        apiName: "Name of third party API to call",
        disableButton: "Disable the button",
        email: "Email Recipient",
        enableButton: "Enable the button",
        formula: {
          operand: {
            add: "Add",
            divide: "Divide",
            multiply: "Multiply",
            subtract: "Subtract",
            value: "Value",
          },
        },
        formulaEntry: "Formula for value",
        linkExternalService: "External Service",
        linkRedirectIdSource: "Source of redirect id",
        linkRedirectIdType: "Type of redirect id",
        linkRedirectTypeSource: "Source of redirect type",
        linkRedirectTypeType: "Type of redirect type",
        linkUri: "Open a web page",
        linkUriHelp:
          "Enter a web address; use {auth token} to set up a callback request",
        linkValueOption: {
          data: "Selected value from entry",
          type: "Type of selected value from entry",
          value: "Entered fixed value",
        },
        literal: "New Value for Field",
        message: "Message",
        offset: "Offset",
        taskAssignedTo: "Assign task to user",
        taskDueDate: "Task due date",
        taskIdentifier: "Unique task identifier",
        taskName: "Name of task to appear in calendar",
        taskOffset: "Offset days for due date",
        triggerClearMapping: "Clear the passed value",
        triggerParameterField: "Passed Value",
        triggerParameterName: "Target Field",
        triggerParameters: "Values to pass to the target rule",
        triggerRegister: "Register to be updated",
        triggerRule: "Rule to call on the target register",
        type: "Action",
        update: {
          clear: "Clear the current value",
          formula: "Calculate the value from a formula",
          value: "Update the value",
        },
        value: "Update Value",
      },
      linkTo: "Open the page {0}",
      lockEntry: "Set locked",
      messageError: 'Error: "{0}"',
      messageInfo: 'Message: "{0}"',
      messageWarning: 'Warning: "{0}"',
      removeTask: "Remove task",
      type: {
        api: "Make a call to a third-party API",
        assignTask: "Assign a task to a user",
        complete: "Mark the record completed",
        error: "Show an error message",
        groupEmail: "Send an email to a group",
        info: "Show an information message",
        link: "Open a web page",
        lock: "Mark the record locked",
        removeTask: "Remove a task",
        triggerRegister: "Update another register entry",
        uncomplete: "Mark the record not completed",
        unlock: "Mark the record unlocked",
        userEmail: "Send an email to a user",
        warning: "Show a warning message",
      },
      uncompleteEntry: "Clear completed",
      unlockEntry: "Set unlocked",
      updateValue: "Set {0} to {1}",
    },
    compare: {
      equal: "Is equal",
      greaterThan: "Is greater than",
      greaterThanEqual: "Is greater than or equal",
      isChanged: "Value is changed",
      isSet: "Value is set",
      lessThan: "Is less than",
      lessThanEqual: "Is less than or equal",
      notEqual: "Is not equal",
      record: "Matches the record",
    },
    condition: "Condition",
    conditionOption: {
      and: "All conditions matched",
      delete: "Delete condition",
      entry: "Entry type",
      none: "No condition set",
      not: "Condition is not true",
      or: "Any condition matched",
      removeNot: "Condition is true",
    },
    conditions: {
      addCondition: "Add another condition",
      and: "and",
      andCondition: "All conditions matched",
      countRowsForColumn: "Count of {0}",
      createEntry: "Create new entry",
      createGroupCondition: "Create a group condition",
      deleteCondition: "Delete condition",
      group: "Group by {0}",
      groupNone: "No grouping",
      groupType: "Group by type of {0}",
      groupWhere: 'Group by {0} for type "{1}"',
      having: "Having {0}",
      havingAny: "Having any entries",
      isChanged: "{0} is changed",
      isNotChanged: "{0} is not changed",
      isNotSet: "{0} is not set",
      isSet: "{0} is set",
      literalValue: "Value to compare against the field",
      matchCondition: "Match the condition",
      max: "more than {0}",
      maxRowsForColumn: "Maximum of {0}",
      min: "less than {0}",
      minRowsForColumn: "Minimum of {0}",
      noCondition: "No condition set",
      not: "Is not {0}",
      notCondition: "The condition is not matched",
      or: "or",
      orCondition: "Any condition matched",
      recordDifferent: "{0} does not match the entry",
      recordSame: "{0} matches the entry",
      sumRowsForColumn: "Sum of {0}",
      summaryWhere: "{0} where {1}",
      type: '{0} is of type "{1}"',
      updateColumn: "{0} updated",
      updateEntry: "Update entry",
      where: "Where {0}",
    },
    entry: {
      create: "Create a new entry",
      update: "Update an entry",
    },
    group: {
      byAll: "No grouping",
      byType: "By type of value",
      typeAll: "All entered types",
    },
    groupBy: "Grouping by Column",
    groupType: "Grouping by Type",
    having: {
      max: "Count greater than",
      min: "Count less than",
      type: "Having",
      value: "Value",
    },
    isActive: "Active",
    option: {
      countRows: "Count the number that are set",
      maxRows: "Maximum of the values of the column",
      minRows: "Minimum of the values of the column",
      sumRows: "Sum the values of the column",
      type: "Type of value",
      value: "Value",
    },
    ruleType: "Type of rule",
    ruleTypeEntry: {
      label: "Trigger an action when changing an entry",
      name: "Entry",
    },
    ruleTypeRegister: {
      label: "Trigger an action when loading the register",
      name: "Register",
    },
    ruleTypeTrigger: {
      label: "Trigger an action externally or from the menu",
      name: "Trigger",
    },
    trigger: {
      parameterNames: "Use the trigger parameters {0}",
      parameterValue: 'the value of "{0}"',
      parameters: "Parameter names to handle within the trigger",
      type: {
        external: "External trigger",
        modifyAny: "Menu item where the user can modify the record",
        modifyAssigned: "Menu item where the user is assigned and can modify",
        readAny: "Menu item where the user can read the record",
        readAssigned: "Menu item where the user is assigned",
      },
      typeLabel: "Type of trigger action",
    },
  },
  ruleName: "Rule Name",
  rules: "Rules",
  showInForm: "Show in Form",
  showInTable: "Show in Table",
  sourceRegisterName: "Source Register Name",
  sourceRegisterTemplateName: "Source Register Template Name",
  text: "Text",
  user: "User",
  userDefined: "User-defined",
  view: {
    entries: "Entries",
    registers: "Registers",
    settings: "Settings",
    templates: "Register Templates",
  },
  viewAndAdd: "View and Add",
  viewAndAddDesc: "Who can view and add new items to the register?",
  viewOnly: "View Only",
  viewOnlyDesc: "Who can view but NOT add new items to the register?",
};
